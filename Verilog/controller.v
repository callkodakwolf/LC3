module controller(clk, rst, state, C_Control, complete);
	input clk;
	input rst;
	input [6:0] C_Control;	// Generated by Decoder module, C_Control[5:4] C_Control[5:4]: Type; C_Control[3]: Store PC; C_Control[2:1] Mem Access Mode; C_Control[0] Load 
	input complete;
	output [3:0] state;
	
	
	reg [3:0] current_state, next_state;
	
	/***************** Sequential Logic  ***************/
	always@(posedge clk or negedge rst)
		if(!rst) current_state <= Fetch;
		else current_state <= next_state;
		
	always@(current_state or C_Control)
		begin
			/* To prevent Latch */
			case(current_state)
				Fetch	:	begin
							end
				Decode	:	begin
							end
				ExecALU	:	begin
							end
				ExecNPC	:	begin
							end
				ExecMemAddr	:	begin
								end
				RMem	:	begin
						end
				IRMem	:	begin
						end
				WMem	:	begin
						end
				UpdatePC:	begin
						end
				UpdateReg:	begin
						end
				Invalid	:begin
						end
//				S11:begin
//					end
				default:	begin
							end
			endcase				
		end
  
endmodule